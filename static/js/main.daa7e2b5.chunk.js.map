{"version":3,"sources":["fbase.js","components/AuthForm.js","images/intro_img.png","pages/Auth.js","components/Calendar.js","pages/Home.js","components/MyChatTable.js","components/MyScdTable.js","pages/Profile.js","components/Chat.js","components/ChatForm.js","pages/Chatting.js","components/NoticeForm.js","components/NoticeList.js","pages/Notice.js","components/Router.js","components/App.js","index.js"],"names":["initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","getAuth","googleProvider","GoogleAuthProvider","facebookProvider","FacebookAuthProvider","dbService","getFirestore","storageService","getStorage","AuthForm","newAccount","useState","email","setEmail","password","setPassword","error","setError","onChange","event","target","name","value","onSubmit","e","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","koError","code","Box","component","sx","m","width","className","TextField","id","label","variant","type","required","Button","disableElevation","Auth","setNewAccount","onSocialClick","provider","signInWithPopup","src","introImg","alt","onClick","Switch","inputProps","prev","calStyle","position","top","left","transform","bgcolor","boxShadow","p","Calendar","userObj","schedule","setSchedule","scheduleColor","setScheduleColor","open","setOpen","calClickState","setCalClickState","desc","setDesc","startDate","setStartDate","endDate","setEndDate","calPublicId","setCalPublicId","calCreateId","setCalCreateId","handleClose","useEffect","q","query","collection","onSnapshot","querySnapshot","scheduleArray","docs","map","doc","data","alert","contents","title","displayName","start","end","color","creatorId","uid","creatorNickName","createdAt","Date","now","addDoc","scd","updateDoc","editEventHandle","_def","publicId","extendedProps","arrr","split","splice","join","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","initialView","headerToolbar","center","right","selectable","select","startStr","endStr","events","eventClick","locale","views","dayGrid","dayMaxEventRows","Modal","onClose","Typography","colors","onChangeComplete","hex","multiline","rows","window","confirm","deleteDoc","Home","containerStyle","style","MyChatTable","chatObj","isView","setIsView","viewChat","setViewChat","editing","setEditing","message","edit","setEdit","docId","setDocId","columns","dataIndex","key","align","ellipsis","render","text","onMessageClick","record","fileUrl","onFileUrlClick","size","onEditClick","onDeleteClick","onEditComplete","deleteObject","ref","rowKey","dataSource","bordered","pagination","pageSize","autoComplete","maxLength","MyScdTable","scdObj","viewScd","setViewScd","onScdClick","content","backgroundColor","padding","borderRadius","Profile","refreshUser","newDisplayName","setNewDisplayName","myChat","setMyChat","mySchedule","setMySchedule","where","orderBy","qs","chatArray","updateProfile","currentUser","Stack","noValidate","hiddenLabel","defaultValue","Chat","isUser","favOnOff","setFavOnOff","onOff","setOnOff","toggleEditing","onfavClick","favObj","user_id","cont_id","getDocs","favId","favCount","user_nickName","toLocaleDateString","ChatForm","setMessage","file","setFile","fileRef","uuidv4","uploadString","getDownloadURL","chat","fileInput","current","useRef","htmlFor","fontSize","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Chatting","chats","setChats","messagesEndRef","scrollIntoView","NoticeForm","noticeStyle","admin","nftitle","setNftitle","nfdesc","setNfdesc","date","year","getFullYear","month","getMonth","slice","day","getDate","hours","getHours","minutes","getMinutes","noticeInfo","no","viewCount","fullWidth","NoticeList","noticeObj","noticeTitle","setNoticeTitle","noticeDesc","setNoticeDesc","onClickRow","index","onRow","mt","Notice","notice","setNotice","setAdmin","noticeArray","forEach","adminId","drawerWidth","openedMixin","theme","transition","transitions","create","easing","sharp","duration","enteringScreen","overflowX","closedMixin","leavingScreen","spacing","breakpoints","up","DrawerHeader","styled","display","alignItems","justifyContent","mixins","toolbar","AppBar","MuiAppBar","shouldForwardProp","prop","zIndex","drawer","marginLeft","Drawer","MuiDrawer","flexShrink","whiteSpace","boxSizing","marginTop","AppRouter","isLoggedIn","useTheme","menu","icon","CssBaseline","Toolbar","IconButton","edge","marginRight","noWrap","direction","Divider","List","to","ListItem","button","marginBottom","ListItemIcon","ListItemText","primary","signOut","flexGrow","exact","path","element","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.daa7e2b5.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  GoogleAuthProvider,\r\n  FacebookAuthProvider,\r\n} from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nexport const authService = getAuth();\r\n\r\nexport const googleProvider = new GoogleAuthProvider();\r\nexport const facebookProvider = new FacebookAuthProvider();\r\n\r\nexport const dbService = getFirestore();\r\n\r\nexport const storageService = getStorage();\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n} from \"@firebase/auth\";\r\nimport { authService } from \"fbase\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst AuthForm = ({ newAccount }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  // 로그인, 회원가입 클릭 이벤트\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        //회원가입\r\n        data = await createUserWithEmailAndPassword(\r\n          authService,\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        //로그인\r\n        data = await signInWithEmailAndPassword(authService, email, password);\r\n      }\r\n    } catch (error) {\r\n      let koError = \"\";\r\n      if (error.code === \"auth/weak-password\") {\r\n        koError = \"비밀번호는 6자 이상이어야 합니다.\";\r\n      } else if (error.code === \"auth/email-already-in-use\") {\r\n        koError = \"이미 사용 중인 이메일 주소입니다.\";\r\n      } else if (error.code === \"auth/user-not-found\") {\r\n        koError = \"존재하지 않는 계정 정보입니다.\";\r\n      } else if (error.code === \"auth/wrong-password\") {\r\n        koError = \"올바른 비밀번호를 입력해 주세요.\";\r\n      } else if (error.code === \"auth/invalid-email\") {\r\n        koError = \"올바른 이메을을 입력해 주세요.\";\r\n      } else if (error.code === \"auth/internal-error\") {\r\n        koError = \"올바른 이메을과 비밀번호를 입력해 주세요.\";\r\n      }\r\n      setError(koError);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"form\"\r\n        sx={{\r\n          \"& > :not(style)\": { m: 1, width: \"25ch\" },\r\n        }}\r\n        // noValidate\r\n        // autoComplete=\"off\"\r\n        onSubmit={onSubmit}\r\n        className=\"auth-form\"\r\n      >\r\n        <div className=\"auth-Input\">\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Email\"\r\n            variant=\"outlined\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            required\r\n            value={email}\r\n            onChange={onChange}\r\n            className=\"auth-input-inner\"\r\n          />\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Password\"\r\n            variant=\"outlined\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            required\r\n            value={password}\r\n            onChange={onChange}\r\n            className=\"auth-input-inner\"\r\n          />\r\n        </div>\r\n        <Button\r\n          variant=\"contained\"\r\n          disableElevation\r\n          type=\"submit\"\r\n          className=\"auth-Submit\"\r\n        >\r\n          {newAccount ? \"회원가입\" : \"로그인\"}\r\n        </Button>\r\n      </Box>\r\n      {error && <span className=\"auth-error\">{error}</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","export default __webpack_public_path__ + \"static/media/intro_img.8a5eef80.png\";","import React, { useState } from \"react\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { authService, googleProvider, facebookProvider } from \"fbase\";\r\nimport { signInWithPopup } from \"firebase/auth\";\r\nimport Button from \"@mui/material/Button\";\r\nimport introImg from \"images/intro_img.png\";\r\nimport Switch from \"@mui/material/Switch\";\r\n\r\nconst Auth = () => {\r\n  const [newAccount, setNewAccount] = useState(false);\r\n\r\n  // 구글, 페이스북 소셜 로그인\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = googleProvider;\r\n    } else if (name === \"facebook\") {\r\n      provider = facebookProvider;\r\n    }\r\n    await signInWithPopup(authService, provider);\r\n  };\r\n\r\n  // 로그인할지 회원가입할지 버튼 체인지\r\n  const toggleAccount = () => {\r\n    setNewAccount((prev) => !prev);\r\n  };\r\n\r\n  // 로그인인지 회원가입인지 체크\r\n  const label = { inputProps: { \"aria-label\": \"Switch demo\" } };\r\n\r\n  return (\r\n    <div id=\"auth-wrap\">\r\n      <img src={introImg} alt=\"\" className=\"auth-img\" />\r\n      <div className=\"auth-container\">\r\n        <AuthForm newAccount={newAccount} />\r\n        <div className=\"auth-social\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={onSocialClick}\r\n            name=\"google\"\r\n            className=\"auth-social-button\"\r\n          >\r\n            google 로그인\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={onSocialClick}\r\n            name=\"facebook\"\r\n            className=\"auth-social-button\"\r\n          >\r\n            facebook 로그인\r\n          </Button>\r\n\r\n          <Switch {...label} onClick={toggleAccount} className=\"auth-toggle\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  addDoc,\r\n  collection,\r\n  onSnapshot,\r\n  query,\r\n  doc,\r\n  updateDoc,\r\n  deleteDoc,\r\n} from \"@firebase/firestore\";\r\nimport { dbService } from \"fbase\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { CirclePicker } from \"react-color\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst calStyle = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 500,\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst Calendar = ({ userObj }) => {\r\n  const [schedule, setSchedule] = useState([]); // 일정\r\n  const [scheduleColor, setScheduleColor] = useState(\"\"); // 일정 색상\r\n  const [open, setOpen] = useState(false); // 일정 입력 폼 오픈\r\n  const [calClickState, setCalClickState] = useState(\"\"); // 신규 작성/수정 및 삭제/읽기 구분\r\n  const [desc, setDesc] = useState(\"\"); // 일정 내용\r\n  const [startDate, setStartDate] = useState(\"\"); // 일정 시작 날짜\r\n  const [endDate, setEndDate] = useState(\"\"); // 일정 끝 날짜\r\n  const [calPublicId, setCalPublicId] = useState(\"\");\r\n  const [calCreateId, setCalCreateId] = useState(\"\");\r\n\r\n  // 상태 초기화 및 팝업 닫기\r\n  const handleClose = () => {\r\n    setOpen(false); // 팝업 닫기\r\n    setCalClickState(\"\"); // 일정 여부 초기화\r\n    setCalPublicId(\"\");\r\n    setCalCreateId(\"\");\r\n    setScheduleColor(\"\");\r\n    setDesc(\"\");\r\n    setStartDate(\"\");\r\n    setEndDate(\"\");\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setDesc(value);\r\n  };\r\n\r\n  // 일정 색상 선택\r\n  const handleChangeComplete = (color) => {\r\n    setScheduleColor(color.hex);\r\n  };\r\n\r\n  // const useComponentWillMount = (func) => {\r\n  //   const willMount = useRef(true);\r\n  //   if (willMount.current) func();\r\n  //   willMount.current = false;\r\n  // };\r\n\r\n  // // 일정 데이터 가져오기\r\n  // useComponentWillMount(() => {\r\n  //   const q = query(collection(dbService, \"scheduler\"));\r\n  //   onSnapshot(q, (querySnapshot) => {\r\n  //     const scheduleArray = querySnapshot.docs.map((doc) => ({\r\n  //       id: doc.id,\r\n  //       ...doc.data(),\r\n  //     }));\r\n  //     setSchedule(scheduleArray);\r\n  //   });\r\n  // });\r\n\r\n  // 일정 데이터 가져오기\r\n  useEffect(() => {\r\n    const q = query(collection(dbService, \"scheduler\"));\r\n    onSnapshot(q, (querySnapshot) => {\r\n      const scheduleArray = querySnapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setSchedule(scheduleArray);\r\n    });\r\n  }, []);\r\n\r\n  // 시작 일 - 마지막 일 선택시(드래그 선택 or 클릭 선택) 입력 팝업 오픈\r\n  const dateSelectHandle = (event) => {\r\n    setCalClickState(\"new\");\r\n    setOpen(true);\r\n    setStartDate(event.startStr);\r\n    setEndDate(event.endStr);\r\n  };\r\n\r\n  // 일정 신규 등록 및 수정\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (scheduleColor === \"\") {\r\n      return alert(\r\n        \"일정 색상을 선택해 주세요.\\n\\n초록색 : 완료된 일정\\n파란색 : 진행중인 일정\\n빨간색 : 중지된 일정\\n회색 : 진행 예정 일정\"\r\n      );\r\n    }\r\n\r\n    if (calClickState === \"new\") {\r\n      if (desc) {\r\n        const contents = {\r\n          title: `${userObj.displayName} : ${desc}`,\r\n          start: startDate,\r\n          end: endDate,\r\n          color: scheduleColor,\r\n          creatorId: userObj.uid,\r\n          creatorNickName: userObj.displayName,\r\n          createdAt: Date.now(),\r\n        };\r\n        await addDoc(collection(dbService, \"scheduler\"), contents);\r\n      } else {\r\n        alert(\"일정 내용을 입력해 주세요.\");\r\n      }\r\n    } else if (calClickState === \"edit\") {\r\n      if (userObj.uid === calCreateId) {\r\n        schedule.map((scd) => {\r\n          if (calPublicId === scd.id) {\r\n            updateDoc(doc(dbService, `scheduler/${scd.id}`), {\r\n              title: `${userObj.displayName} : ${desc}`,\r\n              color: scheduleColor,\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  // 선택한 일정 수정 및 삭제\r\n  const editEventHandle = async (event) => {\r\n    // 일정 내용, 일정 문서 id\r\n    const {\r\n      event: {\r\n        _def: { title, publicId },\r\n      },\r\n    } = event;\r\n\r\n    // 일정 작성자 id\r\n    const {\r\n      event: {\r\n        _def: {\r\n          extendedProps: { creatorId },\r\n        },\r\n      },\r\n    } = event;\r\n    setCalPublicId(publicId);\r\n    setCalCreateId(creatorId);\r\n\r\n    let arrr = title.split(\" : \");\r\n    arrr.splice(0, 1);\r\n\r\n    if (userObj.uid === creatorId) {\r\n      // 내가 쓴 일정이라면, 일정 수정 및 삭제\r\n      setDesc(arrr.join(\":\"));\r\n      setCalClickState(\"edit\");\r\n    } else {\r\n      // 다른 사람의 일정이라면, 읽기\r\n      setDesc(arrr.join(\":\"));\r\n      setCalClickState(\"read\");\r\n    }\r\n    setOpen(true);\r\n  };\r\n\r\n  // 일정 삭제\r\n  const onDeleteScd = (event) => {\r\n    event.preventDefault();\r\n\r\n    schedule.map((scd) => {\r\n      if (calPublicId === scd.id) {\r\n        const ok = window.confirm(\"삭제 하시겠습니까?\");\r\n        if (ok) {\r\n          deleteDoc(doc(dbService, `scheduler/${scd.id}`));\r\n          handleClose();\r\n        } else {\r\n          handleClose();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        &#8251; 일정 유형 &#8251;\r\n        <br />\r\n        초록색 : 완료된 일정\r\n        <br />\r\n        파란색 : 진행중인 일정\r\n        <br />\r\n        빨간색 : 중지된 일정\r\n        <br />\r\n        회색 : 진행 예정 일정\r\n      </p>\r\n      <br />\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        headerToolbar={{\r\n          left: \"prev\",\r\n          center: \"title\",\r\n          right: \"next\",\r\n        }}\r\n        selectable=\"true\"\r\n        select={dateSelectHandle}\r\n        events={schedule}\r\n        eventClick={editEventHandle}\r\n        locale=\"ko\"\r\n        views={{\r\n          dayGrid: {\r\n            dayMaxEventRows: 3,\r\n          },\r\n        }}\r\n      />\r\n\r\n      {open && (\r\n        <Modal\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          {calClickState === \"read\" ? (\r\n            <Box sx={calStyle}>\r\n              <Typography id=\"modal-modal-description\">{desc}</Typography>\r\n            </Box>\r\n          ) : (\r\n            <Box component=\"form\" sx={calStyle} onSubmit={onSubmit}>\r\n              <CirclePicker\r\n                colors={[\"#00de04\", \"#3788d8\", \"#ff0000\", \"#9b9b9b\"]}\r\n                onChangeComplete={handleChangeComplete}\r\n              />\r\n              <br />\r\n              <TextField\r\n                id=\"outlined-multiline-static\"\r\n                label=\"일정 내용\"\r\n                multiline\r\n                rows={4}\r\n                className=\"cal-input\"\r\n                value={desc}\r\n                onChange={onChange}\r\n              />\r\n              <div className=\"cal-submit\">\r\n                {calClickState === \"new\" && (\r\n                  <input type=\"submit\" value=\"등록\" />\r\n                )}\r\n                {calClickState === \"edit\" && (\r\n                  <>\r\n                    <input type=\"submit\" value=\"수정\" />\r\n                    <button onClick={onDeleteScd}>삭제</button>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </Box>\r\n          )}\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","import Calendar from \"components/Calendar\";\r\nimport React from \"react\";\r\n\r\nconst Home = ({ userObj, containerStyle }) => {\r\n  return (\r\n    <div style={containerStyle}>\r\n      <h1>일정 관리</h1>\r\n      <Calendar userObj={userObj} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { deleteDoc, updateDoc, doc } from \"firebase/firestore\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { deleteObject, ref } from \"firebase/storage\";\r\nimport { Table, Space } from \"antd\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst MyChatTable = ({ chatObj, style }) => {\r\n  const [isView, setIsView] = useState(false); // 메시지 뷰 팝업\r\n  const [viewChat, setViewChat] = useState(\"\"); // 선택한 열 메시지\r\n  const [editing, setEditing] = useState(false); // 메시지 수정중 여부\r\n  const [edit, setEdit] = useState(chatObj.message); // 선택한 열 (수정)메시지\r\n  const [docId, setDocId] = useState(\"\");\r\n  const handleOpen = () => setEditing(true);\r\n  const handleClose = () => {\r\n    setEditing(false);\r\n    setDocId(\"\");\r\n    setIsView(false);\r\n  };\r\n\r\n  // 테이블 구조 세팅\r\n  const columns = [\r\n    {\r\n      title: \"내용\",\r\n      dataIndex: \"message\",\r\n      key: \"message\",\r\n      align: \"center\",\r\n      ellipsis: true,\r\n      render: (text) => (\r\n        <a\r\n          onClick={() => {\r\n            onMessageClick(text);\r\n          }}\r\n        >\r\n          {text}\r\n        </a>\r\n      ),\r\n    },\r\n    {\r\n      title: \"사진\",\r\n      dataIndex: \"fileUrl\",\r\n      key: \"fileUrl\",\r\n      align: \"center\",\r\n      ellipsis: true,\r\n      width: 80,\r\n      render: (text, record) => {\r\n        return record.fileUrl ? (\r\n          <button\r\n            onClick={() => {\r\n              onFileUrlClick(record);\r\n            }}\r\n          >\r\n            O\r\n          </button>\r\n        ) : (\r\n          \"X\"\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"좋아요\",\r\n      dataIndex: \"favCount\",\r\n      key: \"favCount\",\r\n      align: \"center\",\r\n      width: 80,\r\n    },\r\n    {\r\n      title: \"수정\",\r\n      key: \"action\",\r\n      align: \"center\",\r\n      width: 140,\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <button\r\n            onClick={() => {\r\n              onEditClick(record);\r\n            }}\r\n          >\r\n            수정\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              onDeleteClick(record);\r\n            }}\r\n          >\r\n            삭제\r\n          </button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // 내용 클릭시\r\n  const onMessageClick = (text) => {\r\n    setIsView(true);\r\n    setViewChat(text);\r\n  };\r\n\r\n  // 사진 버튼 클릭시 새창으로 이미지 띄우기\r\n  const onFileUrlClick = (record) => {\r\n    window.open(record.fileUrl);\r\n  };\r\n\r\n  // 메시지 수정 클릭 이벤트\r\n  const onEditClick = (record) => {\r\n    handleOpen();\r\n    setEdit(record.message);\r\n    setDocId(record.id);\r\n  };\r\n\r\n  // 메시지 수정 완료\r\n  const onEditComplete = async (e) => {\r\n    e.preventDefault();\r\n    await updateDoc(doc(dbService, `chats/${docId}`), {\r\n      message: edit,\r\n    });\r\n    handleClose();\r\n  };\r\n\r\n  // 메시지 내용 수정\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setEdit(value);\r\n  };\r\n\r\n  // 메시지 삭제 클릭 이벤트\r\n  const onDeleteClick = async (record) => {\r\n    const ok = window.confirm(\"삭제하시겠습니까?\");\r\n    if (ok) {\r\n      //delete\r\n      await deleteDoc(doc(dbService, `chats/${record.id}`));\r\n      if (record.fileUrl !== \"\") {\r\n        await deleteObject(ref(storageService, record.fileUrl));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        rowKey={(record) => record.id}\r\n        columns={columns}\r\n        dataSource={chatObj}\r\n        bordered={true}\r\n        pagination={{ position: [\"bottomCenter\"], pageSize: 3 }}\r\n      />\r\n\r\n      {editing && (\r\n        <Modal\r\n          open={editing}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box\r\n            component=\"form\"\r\n            sx={style}\r\n            autoComplete=\"off\"\r\n            className=\"mychattable-form\"\r\n          >\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"내용\"\r\n              multiline\r\n              rows={4}\r\n              type=\"text\"\r\n              onChange={onChange}\r\n              value={edit}\r\n              required\r\n              inputProps={{ maxLength: 200 }}\r\n              className=\"mychattable-form-input\"\r\n            />\r\n            <button onClick={onEditComplete}>수정</button>\r\n          </Box>\r\n        </Modal>\r\n      )}\r\n\r\n      {isView && (\r\n        <Modal\r\n          open={isView}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-description\">{viewChat}</Typography>\r\n          </Box>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyChatTable;\r\n","import React, { useState } from \"react\";\r\nimport { Table } from \"antd\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst MyScdTable = ({ scdObj, style }) => {\r\n  const [isView, setIsView] = useState(false); // 일정 뷰 팝업\r\n  const [viewScd, setViewScd] = useState(\"\"); // 선택한 일정 내용\r\n  const handleClose = () => {\r\n    setViewScd(\"\");\r\n    setIsView(false);\r\n  };\r\n\r\n  // 테이블 구조 세팅\r\n  const columns = [\r\n    {\r\n      title: \"시작일\",\r\n      dataIndex: \"start\",\r\n      key: \"start\",\r\n      align: \"center\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"내용\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text) => (\r\n        <a\r\n          onClick={() => {\r\n            onScdClick(text);\r\n          }}\r\n        >\r\n          {text}\r\n        </a>\r\n      ),\r\n    },\r\n    {\r\n      title: \"일정 유형\",\r\n      dataIndex: \"color\",\r\n      key: \"color\",\r\n      align: \"center\",\r\n      width: 120,\r\n      render: (text) => (\r\n        <span\r\n          style={{\r\n            content: \" \",\r\n            color: text,\r\n            backgroundColor: text,\r\n            padding: \"4px 12px\",\r\n            borderRadius: \"30px\",\r\n          }}\r\n        ></span>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // 일정 내용 클릭 이벤트\r\n  const onScdClick = (text) => {\r\n    setIsView(true);\r\n\r\n    let arrr = text.split(\" : \");\r\n    arrr.splice(0, 1);\r\n    setViewScd(arrr.join(\":\"));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        rowKey={(record) => record.id}\r\n        columns={columns}\r\n        dataSource={scdObj}\r\n        bordered={true}\r\n        pagination={{ position: [\"bottomCenter\"], pageSize: 3 }}\r\n      />\r\n\r\n      {isView && (\r\n        <Modal\r\n          open={isView}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-description\">{viewScd}</Typography>\r\n          </Box>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyScdTable;\r\n","import { updateProfile } from \"@firebase/auth\";\r\nimport {\r\n  collection,\r\n  onSnapshot,\r\n  orderBy,\r\n  query,\r\n  where,\r\n} from \"@firebase/firestore\";\r\nimport { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router\";\r\nimport MyChatTable from \"components/MyChatTable\";\r\nimport MyScdTable from \"components/MyScdTable\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 500,\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst Profile = ({ userObj, refreshUser, containerStyle }) => {\r\n  // const navigate = useNavigate();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName); // 신규 닉네임\r\n  const [myChat, setMyChat] = useState([]); // 내가 쓴 글\r\n  const [mySchedule, setMySchedule] = useState([]); // 내 일정\r\n\r\n  // 로그아웃\r\n  // const onLogOutClick = () => {\r\n  //   authService.signOut();\r\n  //   navigate(\"/\");\r\n  // };\r\n\r\n  // 내가 쓴 메시지 가져와서 setMyChat 담기\r\n  useEffect(async () => {\r\n    const q = query(\r\n      collection(dbService, \"chats\"),\r\n      where(\"creatorId\", \"==\", userObj.uid),\r\n      orderBy(\"createdAt\", \"desc\")\r\n    );\r\n    const qs = query(\r\n      collection(dbService, \"scheduler\"),\r\n      where(\"creatorId\", \"==\", userObj.uid),\r\n      orderBy(\"createdAt\", \"desc\")\r\n    );\r\n\r\n    await onSnapshot(q, (querySnapshot) => {\r\n      const chatArray = querySnapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setMyChat(chatArray);\r\n    });\r\n    await onSnapshot(qs, (querySnapshot) => {\r\n      const scheduleArray = querySnapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setMySchedule(scheduleArray);\r\n    });\r\n  }, []);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  // 닉네임 수정 클릭 이벤트\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await updateProfile(authService.currentUser, {\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n      alert(\"닉네임이 변경되었습니다.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <h2>닉네임 변경</h2>\r\n      <Stack\r\n        component=\"form\"\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={onSubmit}\r\n        className=\"profile-nickname\"\r\n      >\r\n        <TextField\r\n          hiddenLabel\r\n          id=\"filled-hidden-label-normal\"\r\n          type=\"text\"\r\n          defaultValue={newDisplayName}\r\n          variant=\"filled\"\r\n          onChange={onChange}\r\n          inputProps={{ maxLength: 20 }}\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\">\r\n          변경\r\n        </Button>\r\n      </Stack>\r\n      {/* <button onClick={onLogOutClick}>로그아웃</button> */}\r\n\r\n      <div className=\"profile-myChat\">\r\n        <h2>나의 채팅</h2>\r\n        <div>\r\n          <MyChatTable chatObj={myChat} style={style} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"profile-mySchedule\">\r\n        <h2>나의 일정</h2>\r\n        <div>\r\n          <MyScdTable scdObj={mySchedule} style={style} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  deleteDoc,\r\n  doc,\r\n  updateDoc,\r\n  collection,\r\n  query,\r\n  where,\r\n  addDoc,\r\n  getDocs,\r\n} from \"@firebase/firestore\";\r\nimport { deleteObject, ref } from \"@firebase/storage\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst Chat = ({ chatObj, isUser, userObj }) => {\r\n  const [editing, setEditing] = useState(false); // 수정 상태\r\n  const [edit, setEdit] = useState(chatObj.message); // 수정 메시지\r\n  const [favOnOff, setFavOnOff] = useState(false); // 채팅 좋아요\r\n  const [onOff, setOnOff] = useState(false); // 채팅 좋아요\r\n\r\n  // 메시지 삭제 클릭 이벤트\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"삭제하시겠습니까?\");\r\n    if (ok) {\r\n      //delete\r\n      await deleteDoc(doc(dbService, `chats/${chatObj.id}`));\r\n      if (chatObj.fileUrl !== \"\") {\r\n        await deleteObject(ref(storageService, chatObj.fileUrl));\r\n      }\r\n    }\r\n  };\r\n\r\n  // 수정 상태 토글 버튼\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  // 수정 완료 버튼 클릭 이벤트\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await updateDoc(doc(dbService, `chats/${chatObj.id}`), {\r\n      message: edit,\r\n    });\r\n    setEditing(false);\r\n  };\r\n\r\n  // 메시지 내용 수정\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setEdit(value);\r\n  };\r\n\r\n  // 좋아요 클릭\r\n  const onfavClick = async () => {\r\n    const favObj = {\r\n      user_id: userObj.uid,\r\n      cont_id: chatObj.id,\r\n    };\r\n\r\n    const q = query(\r\n      collection(dbService, \"fav_whether\"),\r\n      where(\"user_id\", \"==\", userObj.uid),\r\n      where(\"cont_id\", \"==\", chatObj.id)\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n\r\n    let favId;\r\n    querySnapshot.docs.map((doc) => {\r\n      favId = doc.id;\r\n    });\r\n\r\n    if (querySnapshot.size === 1) {\r\n      await deleteDoc(doc(dbService, `fav_whether/${favId}`));\r\n      await updateDoc(doc(dbService, `chats/${chatObj.id}`), {\r\n        favCount: chatObj.favCount - 1,\r\n      });\r\n      setFavOnOff(false);\r\n      setOnOff(false);\r\n    } else if (querySnapshot.size === 0) {\r\n      await addDoc(collection(dbService, \"fav_whether\"), favObj);\r\n      await updateDoc(doc(dbService, `chats/${chatObj.id}`), {\r\n        favCount: chatObj.favCount + 1,\r\n      });\r\n      setFavOnOff(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={isUser ? \"chat-item chat-my\" : \"chat-item\"}>\r\n      {editing ? (\r\n        <>\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            autoComplete=\"off\"\r\n            onSubmit={onSubmit}\r\n            className=\"chat-edit-form\"\r\n          >\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"edit message\"\r\n              multiline\r\n              rows={3}\r\n              onChange={onChange}\r\n              value={edit}\r\n              required\r\n              inputProps={{ maxLength: 200 }}\r\n            />\r\n            <div className=\"chat-edit-form-button\">\r\n              <Button type=\"submit\" variant=\"contained\">\r\n                수정\r\n              </Button>\r\n              <Button onClick={toggleEditing} variant=\"contained\">\r\n                취소\r\n              </Button>\r\n            </div>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4 className=\"chat-userName\">{chatObj.user_nickName}</h4>\r\n          {chatObj.fileUrl && (\r\n            <img src={chatObj.fileUrl} alt=\"\" className=\"chat-img\" />\r\n          )}\r\n          <h4>{chatObj.message}</h4>\r\n          <div className=\"chat-info\">\r\n            <span>{new Date(chatObj.createdAt).toLocaleDateString()}</span>\r\n            <div className=\"chat-fav\">\r\n              {!favOnOff && !onOff ? (\r\n                <FavoriteIcon\r\n                  style={{ color: \"gray\" }}\r\n                  onClick={onfavClick}\r\n                  className=\"chat-favIcon\"\r\n                />\r\n              ) : (\r\n                <FavoriteIcon\r\n                  style={{ color: \"red\" }}\r\n                  onClick={onfavClick}\r\n                  className=\"chat-favIcon\"\r\n                />\r\n              )}\r\n              <span>{chatObj.favCount}</span>\r\n            </div>\r\n          </div>\r\n          {isUser && (\r\n            <div className=\"chat-edit-button\">\r\n              <DeleteIcon onClick={onDeleteClick} className=\"chat-delete\" />\r\n              <EditIcon onClick={toggleEditing} className=\"chat-edit\" />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import { addDoc, collection } from \"@firebase/firestore\";\r\nimport { getDownloadURL, ref, uploadString } from \"@firebase/storage\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport PhotoCameraIcon from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst ChatForm = ({ userObj }) => {\r\n  const [message, setMessage] = useState(\"\"); // 메시지\r\n  const [file, setFile] = useState(\"\"); // 파일 업로드\r\n  const [favCount, setFavCount] = useState(0); // 채팅 좋아요 개수\r\n\r\n  // 메시지 및 (이미지)파일 추가\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let fileUrl = \"\";\r\n    if (file !== \"\") {\r\n      const fileRef = ref(storageService, `${userObj.uid}/${uuidv4()}`);\r\n      const response = await uploadString(fileRef, file, \"data_url\");\r\n      fileUrl = await getDownloadURL(fileRef);\r\n    }\r\n    const chat = {\r\n      message,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      favCount,\r\n      fileUrl,\r\n      user_nickName: userObj.displayName,\r\n    };\r\n\r\n    if (message === \"\" && file === \"\") {\r\n      alert(\"메시지를 입력해 주세요\");\r\n    }\r\n\r\n    if (file || message) {\r\n      await addDoc(collection(dbService, \"chats\"), chat);\r\n      setMessage(\"\");\r\n      setFile(\"\");\r\n      fileInput.current.value = null;\r\n    }\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setMessage(value);\r\n  };\r\n\r\n  // (이미지) 파일 업로드\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n\r\n      setFile(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n\r\n  // (이미지) 파일 삭제 후 처리\r\n  const fileInput = useRef();\r\n  const onClearPhotoClick = () => {\r\n    setFile(\"\");\r\n    fileInput.current.value = null;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"form\"\r\n        sx={{\r\n          \"& > :not(style)\": { m: 1, width: \"25ch\" },\r\n        }}\r\n        // noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={onSubmit}\r\n        className=\"chat-Form\"\r\n      >\r\n        <label className=\"chatForm-fileSet\" htmlFor=\"chatForm-file\">\r\n          <PhotoCameraIcon fontSize=\"large\" />\r\n        </label>\r\n        <input\r\n          id=\"chatForm-file\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          ref={fileInput}\r\n          onChange={onFileChange}\r\n        />\r\n        {file && (\r\n          <div className=\"chatForm-img\">\r\n            <img src={file} alt=\"\" />\r\n            <DeleteIcon onClick={onClearPhotoClick} fontSize=\"large\" />\r\n          </div>\r\n        )}\r\n        <TextField\r\n          id=\"outlined-multiline-static\"\r\n          label=\"send message\"\r\n          multiline\r\n          rows={3}\r\n          value={message}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          inputProps={{ maxLength: 200 }}\r\n          className=\"chatForm-field\"\r\n        />\r\n        <Button\r\n          variant=\"outlined\"\r\n          disableElevation\r\n          type=\"submit\"\r\n          className=\"chatForm-submit\"\r\n        >\r\n          전송\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatForm;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\r\nimport Chat from \"components/Chat\";\r\nimport ChatForm from \"components/ChatForm\";\r\nimport { dbService } from \"fbase\";\r\n\r\nconst Chatting = ({ userObj, containerStyle }) => {\r\n  const [chats, setChats] = useState([]); // 입력된 총 메시지\r\n  const messagesEndRef = useRef();\r\n\r\n  // 새로운 채팅 입력시 스크롤 하단으로\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView();\r\n  };\r\n\r\n  useEffect(async () => {\r\n    // 총 메시지 실시간으로 가져오기\r\n    const q = query(\r\n      collection(dbService, \"chats\"),\r\n      orderBy(\"createdAt\", \"asc\")\r\n    );\r\n    onSnapshot(q, (querySnapshot) => {\r\n      const chatArray = querySnapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setChats(chatArray);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [chats]);\r\n\r\n  return (\r\n    <div className=\"chat-wrap\" style={containerStyle}>\r\n      <div className=\"chat-item-wrap\">\r\n        {chats.map((chat) => (\r\n          <Chat\r\n            key={chat.id}\r\n            chatObj={chat}\r\n            isUser={chat.creatorId === userObj.uid}\r\n            userObj={userObj}\r\n          />\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <hr />\r\n      <ChatForm userObj={userObj} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatting;\r\n","import React, { useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { addDoc, collection } from \"@firebase/firestore\";\r\nimport { dbService } from \"fbase\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nconst NoticeForm = ({ userObj, noticeStyle, admin }) => {\r\n  const [open, setOpen] = useState(false); // 공지 작성 폼\r\n  const handleOpen = () => setOpen(true); // 공지 작성 폼 활성화\r\n  const handleClose = () => setOpen(false); // 공지 작성 폼 비활성화\r\n  const [nftitle, setNftitle] = useState(\"\"); // 공지 제목\r\n  const [nfdesc, setNfdesc] = useState(\"\"); // 공지 내용\r\n\r\n  // 공지 제목, 내용 셋팅\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === \"title\") {\r\n      setNftitle(value);\r\n    } else if (name === \"desc\") {\r\n      setNfdesc(value);\r\n    }\r\n  };\r\n\r\n  // 공지 등록\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    let day = (\"0\" + date.getDate()).slice(-2);\r\n    let hours = (\"0\" + date.getHours()).slice(-2);\r\n    let minutes = (\"0\" + date.getMinutes()).slice(-2);\r\n\r\n    const noticeInfo = {\r\n      no: year + month + day + hours + minutes,\r\n      title: nftitle,\r\n      desc: nfdesc,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      creatorNickName: userObj.displayName,\r\n      viewCount: 0,\r\n    };\r\n\r\n    await addDoc(collection(dbService, \"notices\"), noticeInfo);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {admin && <button onClick={handleOpen}>클릭</button>}\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box component=\"form\" onSubmit={onSubmit} sx={noticeStyle}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            label=\"제목\"\r\n            variant=\"standard\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            onChange={onChange}\r\n            fullWidth={true}\r\n            inputProps={{ maxLength: 100 }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <TextField\r\n            id=\"outlined-multiline-static\"\r\n            label=\"내용\"\r\n            multiline\r\n            rows={4}\r\n            type=\"text\"\r\n            name=\"desc\"\r\n            onChange={onChange}\r\n            fullWidth={true}\r\n            inputProps={{ maxLength: 500 }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <input type=\"submit\" value=\"게시\" />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoticeForm;\r\n","import React, { useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Table } from \"antd\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { doc, updateDoc } from \"firebase/firestore\";\r\nimport { dbService } from \"fbase\";\r\n\r\nconst NoticeList = ({ noticeObj, noticeStyle }) => {\r\n  const [open, setOpen] = useState(false); // 공지 내용 활성화 여부\r\n  const handleOpen = () => setOpen(true); // 공지 내용 폼 활성화\r\n  const handleClose = () => setOpen(false); // 공지 내용 폼 비활성화\r\n  const [noticeTitle, setNoticeTitle] = useState(\"\"); // 클릭한 공지 제목\r\n  const [noticeDesc, setNoticeDesc] = useState(\"\"); // 클릭한 공지 내용\r\n\r\n  // 테이블 구조 세팅\r\n  const columns = [\r\n    {\r\n      title: \"No\",\r\n      dataIndex: \"no\",\r\n      key: \"no\",\r\n      width: 150,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"제목\",\r\n      dataIndex: \"title\",\r\n      key: \"title\",\r\n      render: (text) => <a>{text}</a>,\r\n      align: \"center\",\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      title: \"조회수\",\r\n      dataIndex: \"viewCount\",\r\n      key: \"viewCount\",\r\n      align: \"center\",\r\n      width: 80,\r\n    },\r\n    {\r\n      title: \"작성자\",\r\n      dataIndex: \"creatorNickName\",\r\n      key: \"creatorNickName\",\r\n      align: \"center\",\r\n      width: 200,\r\n    },\r\n  ];\r\n\r\n  // 클릭한 공지 내용 보여주기\r\n  const onClickRow = async (record, index) => {\r\n    setNoticeTitle(record.title);\r\n    setNoticeDesc(record.desc);\r\n    handleOpen();\r\n    await updateDoc(doc(dbService, `notices/${record.id}`), {\r\n      viewCount: record.viewCount + 1,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Table\r\n        rowKey={(record) => record.id}\r\n        columns={columns}\r\n        dataSource={noticeObj}\r\n        bordered={true}\r\n        pagination={{ position: [\"bottomCenter\"] }}\r\n        onRow={(record, index) => {\r\n          return {\r\n            onClick: () => {\r\n              onClickRow(record, index);\r\n            },\r\n          };\r\n        }}\r\n      />\r\n\r\n      {open && (\r\n        <>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box sx={noticeStyle}>\r\n              <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                {noticeTitle}\r\n              </Typography>\r\n              <hr />\r\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                {noticeDesc}\r\n              </Typography>\r\n            </Box>\r\n          </Modal>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoticeList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NoticeForm from \"components/NoticeForm\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  onSnapshot,\r\n  orderBy,\r\n  query,\r\n} from \"firebase/firestore\";\r\nimport { dbService } from \"fbase\";\r\nimport NoticeList from \"components/NoticeList\";\r\n\r\nconst noticeStyle = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst Notice = ({ userObj, containerStyle }) => {\r\n  const [notice, setNotice] = useState([]); // 공지사항\r\n  const [admin, setAdmin] = useState(\"\"); // admin 계정 확인\r\n\r\n  useEffect(async () => {\r\n    const q = query(\r\n      collection(dbService, \"notices\"),\r\n      orderBy(\"createdAt\", \"desc\")\r\n    );\r\n    onSnapshot(q, (querySnapshot) => {\r\n      const noticeArray = querySnapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setNotice(noticeArray);\r\n    });\r\n\r\n    const querySnapshot = await getDocs(collection(dbService, \"admin\"));\r\n    querySnapshot.forEach((doc) => {\r\n      setAdmin(doc.data().adminId);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <h1>공지사항</h1>\r\n      <NoticeForm\r\n        userObj={userObj}\r\n        noticeStyle={noticeStyle}\r\n        admin={userObj.uid === admin}\r\n      />\r\n      <div>\r\n        <NoticeList noticeObj={notice} noticeStyle={noticeStyle} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notice;\r\n","import React, { useState } from \"react\";\r\nimport { HashRouter as Router, Route, Routes, Link } from \"react-router-dom\";\r\nimport { styled, useTheme } from \"@mui/material/styles\";\r\nimport Box from \"@mui/material/Box\";\r\nimport MuiDrawer from \"@mui/material/Drawer\";\r\nimport MuiAppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport List from \"@mui/material/List\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport { FaPowerOff } from \"react-icons/fa\";\r\nimport {\r\n  HiHome,\r\n  HiChatAlt2,\r\n  HiClipboardList,\r\n  HiUserCircle,\r\n} from \"react-icons/hi\";\r\nimport Auth from \"pages/Auth\";\r\nimport Home from \"pages/Home\";\r\nimport Profile from \"pages/Profile\";\r\nimport Chatting from \"pages/Chatting\";\r\nimport Notice from \"pages/Notice\";\r\nimport { authService } from \"fbase\";\r\n\r\nconst drawerWidth = 200;\r\n\r\nconst openedMixin = (theme) => ({\r\n  width: drawerWidth,\r\n  transition: theme.transitions.create(\"width\", {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.enteringScreen,\r\n  }),\r\n  overflowX: \"hidden\",\r\n});\r\n\r\nconst closedMixin = (theme) => ({\r\n  transition: theme.transitions.create(\"width\", {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  overflowX: \"hidden\",\r\n  width: `calc(${theme.spacing(7)} + 1px)`,\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    width: `calc(${theme.spacing(9)} + 1px)`,\r\n  },\r\n});\r\n\r\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"flex-end\",\r\n  padding: theme.spacing(0, 1),\r\n  ...theme.mixins.toolbar,\r\n}));\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== \"open\",\r\n})(({ theme, open }) => ({\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create([\"width\", \"margin\"], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, {\r\n  shouldForwardProp: (prop) => prop !== \"open\",\r\n})(({ theme, open }) => ({\r\n  width: drawerWidth,\r\n  flexShrink: 0,\r\n  whiteSpace: \"nowrap\",\r\n  boxSizing: \"border-box\",\r\n  ...(open && {\r\n    ...openedMixin(theme),\r\n    \"& .MuiDrawer-paper\": openedMixin(theme),\r\n  }),\r\n  ...(!open && {\r\n    ...closedMixin(theme),\r\n    \"& .MuiDrawer-paper\": closedMixin(theme),\r\n  }),\r\n}));\r\n\r\n// 사이드 네비를 포함하지 않는 콘텐츠 영역 스타일\r\nconst containerStyle = {\r\n  padding: \"30px\",\r\n  marginTop: \"70px\",\r\n};\r\n\r\nconst AppRouter = ({ userObj, refreshUser, isLoggedIn }) => {\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(true); // 사이드 메뉴 on/off 여부\r\n  const [menu, setMenu] = useState([\"\", \"chatting\", \"notice\", \"profile\"]); // 메뉴 link => component\r\n  const [icon, setIcon] = useState([\r\n    <HiHome size={39} />,\r\n    <HiChatAlt2 size={39} />,\r\n    <HiClipboardList size={39} />,\r\n    <HiUserCircle size={39} />,\r\n  ]); // 메뉴 아이콘\r\n\r\n  // 로그아웃\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Box sx={{ display: \"flex\" }}>\r\n        {isLoggedIn && (\r\n          <>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\" open={open}>\r\n              <Toolbar>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={handleDrawerOpen}\r\n                  edge=\"start\"\r\n                  sx={{\r\n                    marginRight: \"36px\",\r\n                    ...(open && { display: \"none\" }),\r\n                  }}\r\n                >\r\n                  <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap component=\"div\">\r\n                  PKS of Portfolio\r\n                </Typography>\r\n              </Toolbar>\r\n            </AppBar>\r\n            <Drawer variant=\"permanent\" open={open}>\r\n              <DrawerHeader>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                  {theme.direction === \"rtl\" ? (\r\n                    <ChevronRightIcon />\r\n                  ) : (\r\n                    <ChevronLeftIcon />\r\n                  )}\r\n                </IconButton>\r\n              </DrawerHeader>\r\n              <Divider />\r\n              <List>\r\n                {[\"Home\", \"Chatting\", \"Notice\", \"Profile\"].map(\r\n                  (text, index) => (\r\n                    <Link to={menu[index]} key={index}>\r\n                      <ListItem\r\n                        button\r\n                        key={text}\r\n                        style={{ marginBottom: \"10px\", marginTop: \"10px\" }}\r\n                      >\r\n                        <ListItemIcon>{icon[index]}</ListItemIcon>\r\n                        <ListItemText\r\n                          primary={text}\r\n                          style={{ color: \"#616161\" }}\r\n                        />\r\n                      </ListItem>\r\n                    </Link>\r\n                  )\r\n                )}\r\n              </List>\r\n              <Link to=\"/\" className=\"logOut-button\">\r\n                <FaPowerOff onClick={onLogOutClick} size={30} />\r\n              </Link>\r\n            </Drawer>\r\n          </>\r\n        )}\r\n\r\n        <Box component=\"main\" sx={{ flexGrow: 1 }}>\r\n          <div className=\"container\">\r\n            <Routes>\r\n              {isLoggedIn ? (\r\n                <>\r\n                  <Route\r\n                    exact\r\n                    path=\"/\"\r\n                    element={\r\n                      <Home userObj={userObj} containerStyle={containerStyle} />\r\n                    }\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path=\"/profile\"\r\n                    element={\r\n                      <Profile\r\n                        userObj={userObj}\r\n                        refreshUser={refreshUser}\r\n                        containerStyle={containerStyle}\r\n                      />\r\n                    }\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path=\"/chatting\"\r\n                    element={\r\n                      <Chatting\r\n                        userObj={userObj}\r\n                        containerStyle={containerStyle}\r\n                      />\r\n                    }\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path=\"/notice\"\r\n                    element={\r\n                      <Notice\r\n                        userObj={userObj}\r\n                        containerStyle={containerStyle}\r\n                      />\r\n                    }\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Route exact path=\"/\" element={<Auth />} />\r\n                </>\r\n              )}\r\n            </Routes>\r\n          </div>\r\n        </Box>\r\n      </Box>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\nimport { updateProfile } from \"@firebase/auth\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // setIsLoggedIn(true);\n        // 구글, 페이스북 로그인\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) =>\n            updateProfile(authService.currentUser, {\n              displayName: user.displayName,\n            }),\n        });\n\n        // 신규 가입자 로그인\n        if (user.displayName == null) {\n          setUserObj({\n            displayName: \"신규 가입자\",\n            uid: user.uid,\n            updateProfile: (args) =>\n              updateProfile(authService.currentUser, {\n                displayName: user.displayName,\n              }),\n          });\n        }\n      } else {\n        // setIsLoggedIn(false);\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  // 닉네임 변경 후 user 새로고침 (실시간으로 반영하기 위함)\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) =>\n        updateProfile(user, { displayName: user.displayName }),\n    });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"init...\"\n      )}\n      {/* <footer>footer</footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"css/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}